// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/yampr_grpc.pb.go
//
// Generated by this command:
//
//	mockgen --source=./proto/yampr_grpc.pb.go --package=mock_proto
//
// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/ray1422/yamrp/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockYAMRPAnswererClient is a mock of YAMRPAnswererClient interface.
type MockYAMRPAnswererClient struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPAnswererClientMockRecorder
}

// MockYAMRPAnswererClientMockRecorder is the mock recorder for MockYAMRPAnswererClient.
type MockYAMRPAnswererClientMockRecorder struct {
	mock *MockYAMRPAnswererClient
}

// NewMockYAMRPAnswererClient creates a new mock instance.
func NewMockYAMRPAnswererClient(ctrl *gomock.Controller) *MockYAMRPAnswererClient {
	mock := &MockYAMRPAnswererClient{ctrl: ctrl}
	mock.recorder = &MockYAMRPAnswererClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPAnswererClient) EXPECT() *MockYAMRPAnswererClientMockRecorder {
	return m.recorder
}

// SendAnswer mocks base method.
func (m *MockYAMRPAnswererClient) SendAnswer(ctx context.Context, in *proto.ReplyToAnswererRequest, opts ...grpc.CallOption) (*proto.AnswerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendAnswer", varargs...)
	ret0, _ := ret[0].(*proto.AnswerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAnswer indicates an expected call of SendAnswer.
func (mr *MockYAMRPAnswererClientMockRecorder) SendAnswer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswer", reflect.TypeOf((*MockYAMRPAnswererClient)(nil).SendAnswer), varargs...)
}

// SendIceCandidate mocks base method.
func (m *MockYAMRPAnswererClient) SendIceCandidate(ctx context.Context, opts ...grpc.CallOption) (proto.YAMRPAnswerer_SendIceCandidateClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendIceCandidate", varargs...)
	ret0, _ := ret[0].(proto.YAMRPAnswerer_SendIceCandidateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendIceCandidate indicates an expected call of SendIceCandidate.
func (mr *MockYAMRPAnswererClientMockRecorder) SendIceCandidate(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIceCandidate", reflect.TypeOf((*MockYAMRPAnswererClient)(nil).SendIceCandidate), varargs...)
}

// WaitForOffer mocks base method.
func (m *MockYAMRPAnswererClient) WaitForOffer(ctx context.Context, in *proto.WaitForOfferRequest, opts ...grpc.CallOption) (*proto.OfferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForOffer", varargs...)
	ret0, _ := ret[0].(*proto.OfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForOffer indicates an expected call of WaitForOffer.
func (mr *MockYAMRPAnswererClientMockRecorder) WaitForOffer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForOffer", reflect.TypeOf((*MockYAMRPAnswererClient)(nil).WaitForOffer), varargs...)
}

// MockYAMRPAnswerer_SendIceCandidateClient is a mock of YAMRPAnswerer_SendIceCandidateClient interface.
type MockYAMRPAnswerer_SendIceCandidateClient struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder
}

// MockYAMRPAnswerer_SendIceCandidateClientMockRecorder is the mock recorder for MockYAMRPAnswerer_SendIceCandidateClient.
type MockYAMRPAnswerer_SendIceCandidateClientMockRecorder struct {
	mock *MockYAMRPAnswerer_SendIceCandidateClient
}

// NewMockYAMRPAnswerer_SendIceCandidateClient creates a new mock instance.
func NewMockYAMRPAnswerer_SendIceCandidateClient(ctrl *gomock.Controller) *MockYAMRPAnswerer_SendIceCandidateClient {
	mock := &MockYAMRPAnswerer_SendIceCandidateClient{ctrl: ctrl}
	mock.recorder = &MockYAMRPAnswerer_SendIceCandidateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) EXPECT() *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) CloseAndRecv() (*proto.SendIceCandidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*proto.SendIceCandidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockYAMRPAnswerer_SendIceCandidateClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) Send(arg0 *proto.ReplyToAnswererRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockYAMRPAnswerer_SendIceCandidateClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockYAMRPAnswerer_SendIceCandidateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateClient)(nil).Trailer))
}

// MockYAMRPAnswererServer is a mock of YAMRPAnswererServer interface.
type MockYAMRPAnswererServer struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPAnswererServerMockRecorder
}

// MockYAMRPAnswererServerMockRecorder is the mock recorder for MockYAMRPAnswererServer.
type MockYAMRPAnswererServerMockRecorder struct {
	mock *MockYAMRPAnswererServer
}

// NewMockYAMRPAnswererServer creates a new mock instance.
func NewMockYAMRPAnswererServer(ctrl *gomock.Controller) *MockYAMRPAnswererServer {
	mock := &MockYAMRPAnswererServer{ctrl: ctrl}
	mock.recorder = &MockYAMRPAnswererServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPAnswererServer) EXPECT() *MockYAMRPAnswererServerMockRecorder {
	return m.recorder
}

// SendAnswer mocks base method.
func (m *MockYAMRPAnswererServer) SendAnswer(arg0 context.Context, arg1 *proto.ReplyToAnswererRequest) (*proto.AnswerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAnswer", arg0, arg1)
	ret0, _ := ret[0].(*proto.AnswerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAnswer indicates an expected call of SendAnswer.
func (mr *MockYAMRPAnswererServerMockRecorder) SendAnswer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswer", reflect.TypeOf((*MockYAMRPAnswererServer)(nil).SendAnswer), arg0, arg1)
}

// SendIceCandidate mocks base method.
func (m *MockYAMRPAnswererServer) SendIceCandidate(arg0 proto.YAMRPAnswerer_SendIceCandidateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendIceCandidate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendIceCandidate indicates an expected call of SendIceCandidate.
func (mr *MockYAMRPAnswererServerMockRecorder) SendIceCandidate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIceCandidate", reflect.TypeOf((*MockYAMRPAnswererServer)(nil).SendIceCandidate), arg0)
}

// WaitForOffer mocks base method.
func (m *MockYAMRPAnswererServer) WaitForOffer(arg0 context.Context, arg1 *proto.WaitForOfferRequest) (*proto.OfferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForOffer", arg0, arg1)
	ret0, _ := ret[0].(*proto.OfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForOffer indicates an expected call of WaitForOffer.
func (mr *MockYAMRPAnswererServerMockRecorder) WaitForOffer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForOffer", reflect.TypeOf((*MockYAMRPAnswererServer)(nil).WaitForOffer), arg0, arg1)
}

// mustEmbedUnimplementedYAMRPAnswererServer mocks base method.
func (m *MockYAMRPAnswererServer) mustEmbedUnimplementedYAMRPAnswererServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedYAMRPAnswererServer")
}

// mustEmbedUnimplementedYAMRPAnswererServer indicates an expected call of mustEmbedUnimplementedYAMRPAnswererServer.
func (mr *MockYAMRPAnswererServerMockRecorder) mustEmbedUnimplementedYAMRPAnswererServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedYAMRPAnswererServer", reflect.TypeOf((*MockYAMRPAnswererServer)(nil).mustEmbedUnimplementedYAMRPAnswererServer))
}

// MockUnsafeYAMRPAnswererServer is a mock of UnsafeYAMRPAnswererServer interface.
type MockUnsafeYAMRPAnswererServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeYAMRPAnswererServerMockRecorder
}

// MockUnsafeYAMRPAnswererServerMockRecorder is the mock recorder for MockUnsafeYAMRPAnswererServer.
type MockUnsafeYAMRPAnswererServerMockRecorder struct {
	mock *MockUnsafeYAMRPAnswererServer
}

// NewMockUnsafeYAMRPAnswererServer creates a new mock instance.
func NewMockUnsafeYAMRPAnswererServer(ctrl *gomock.Controller) *MockUnsafeYAMRPAnswererServer {
	mock := &MockUnsafeYAMRPAnswererServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeYAMRPAnswererServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeYAMRPAnswererServer) EXPECT() *MockUnsafeYAMRPAnswererServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedYAMRPAnswererServer mocks base method.
func (m *MockUnsafeYAMRPAnswererServer) mustEmbedUnimplementedYAMRPAnswererServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedYAMRPAnswererServer")
}

// mustEmbedUnimplementedYAMRPAnswererServer indicates an expected call of mustEmbedUnimplementedYAMRPAnswererServer.
func (mr *MockUnsafeYAMRPAnswererServerMockRecorder) mustEmbedUnimplementedYAMRPAnswererServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedYAMRPAnswererServer", reflect.TypeOf((*MockUnsafeYAMRPAnswererServer)(nil).mustEmbedUnimplementedYAMRPAnswererServer))
}

// MockYAMRPAnswerer_SendIceCandidateServer is a mock of YAMRPAnswerer_SendIceCandidateServer interface.
type MockYAMRPAnswerer_SendIceCandidateServer struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder
}

// MockYAMRPAnswerer_SendIceCandidateServerMockRecorder is the mock recorder for MockYAMRPAnswerer_SendIceCandidateServer.
type MockYAMRPAnswerer_SendIceCandidateServerMockRecorder struct {
	mock *MockYAMRPAnswerer_SendIceCandidateServer
}

// NewMockYAMRPAnswerer_SendIceCandidateServer creates a new mock instance.
func NewMockYAMRPAnswerer_SendIceCandidateServer(ctrl *gomock.Controller) *MockYAMRPAnswerer_SendIceCandidateServer {
	mock := &MockYAMRPAnswerer_SendIceCandidateServer{ctrl: ctrl}
	mock.recorder = &MockYAMRPAnswerer_SendIceCandidateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) EXPECT() *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) Recv() (*proto.ReplyToAnswererRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.ReplyToAnswererRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockYAMRPAnswerer_SendIceCandidateServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) SendAndClose(arg0 *proto.SendIceCandidateResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) SendAndClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockYAMRPAnswerer_SendIceCandidateServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockYAMRPAnswerer_SendIceCandidateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockYAMRPAnswerer_SendIceCandidateServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockYAMRPAnswerer_SendIceCandidateServer)(nil).SetTrailer), arg0)
}

// MockYAMRPOffererClient is a mock of YAMRPOffererClient interface.
type MockYAMRPOffererClient struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPOffererClientMockRecorder
}

// MockYAMRPOffererClientMockRecorder is the mock recorder for MockYAMRPOffererClient.
type MockYAMRPOffererClientMockRecorder struct {
	mock *MockYAMRPOffererClient
}

// NewMockYAMRPOffererClient creates a new mock instance.
func NewMockYAMRPOffererClient(ctrl *gomock.Controller) *MockYAMRPOffererClient {
	mock := &MockYAMRPOffererClient{ctrl: ctrl}
	mock.recorder = &MockYAMRPOffererClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPOffererClient) EXPECT() *MockYAMRPOffererClientMockRecorder {
	return m.recorder
}

// SendOffer mocks base method.
func (m *MockYAMRPOffererClient) SendOffer(ctx context.Context, in *proto.SendOfferRequest, opts ...grpc.CallOption) (*proto.OfferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOffer", varargs...)
	ret0, _ := ret[0].(*proto.OfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOffer indicates an expected call of SendOffer.
func (mr *MockYAMRPOffererClientMockRecorder) SendOffer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOffer", reflect.TypeOf((*MockYAMRPOffererClient)(nil).SendOffer), varargs...)
}

// WaitForAnswer mocks base method.
func (m *MockYAMRPOffererClient) WaitForAnswer(ctx context.Context, in *proto.WaitForAnswerRequest, opts ...grpc.CallOption) (*proto.AnswerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForAnswer", varargs...)
	ret0, _ := ret[0].(*proto.AnswerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForAnswer indicates an expected call of WaitForAnswer.
func (mr *MockYAMRPOffererClientMockRecorder) WaitForAnswer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAnswer", reflect.TypeOf((*MockYAMRPOffererClient)(nil).WaitForAnswer), varargs...)
}

// WaitForICECandidate mocks base method.
func (m *MockYAMRPOffererClient) WaitForICECandidate(ctx context.Context, in *proto.WaitForICECandidateRequest, opts ...grpc.CallOption) (proto.YAMRPOfferer_WaitForICECandidateClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForICECandidate", varargs...)
	ret0, _ := ret[0].(proto.YAMRPOfferer_WaitForICECandidateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForICECandidate indicates an expected call of WaitForICECandidate.
func (mr *MockYAMRPOffererClientMockRecorder) WaitForICECandidate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForICECandidate", reflect.TypeOf((*MockYAMRPOffererClient)(nil).WaitForICECandidate), varargs...)
}

// MockYAMRPOfferer_WaitForICECandidateClient is a mock of YAMRPOfferer_WaitForICECandidateClient interface.
type MockYAMRPOfferer_WaitForICECandidateClient struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder
}

// MockYAMRPOfferer_WaitForICECandidateClientMockRecorder is the mock recorder for MockYAMRPOfferer_WaitForICECandidateClient.
type MockYAMRPOfferer_WaitForICECandidateClientMockRecorder struct {
	mock *MockYAMRPOfferer_WaitForICECandidateClient
}

// NewMockYAMRPOfferer_WaitForICECandidateClient creates a new mock instance.
func NewMockYAMRPOfferer_WaitForICECandidateClient(ctrl *gomock.Controller) *MockYAMRPOfferer_WaitForICECandidateClient {
	mock := &MockYAMRPOfferer_WaitForICECandidateClient{ctrl: ctrl}
	mock.recorder = &MockYAMRPOfferer_WaitForICECandidateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPOfferer_WaitForICECandidateClient) EXPECT() *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateClient) Recv() (*proto.IceCandidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.IceCandidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockYAMRPOfferer_WaitForICECandidateClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockYAMRPOfferer_WaitForICECandidateClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockYAMRPOfferer_WaitForICECandidateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateClient)(nil).Trailer))
}

// MockYAMRPOffererServer is a mock of YAMRPOffererServer interface.
type MockYAMRPOffererServer struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPOffererServerMockRecorder
}

// MockYAMRPOffererServerMockRecorder is the mock recorder for MockYAMRPOffererServer.
type MockYAMRPOffererServerMockRecorder struct {
	mock *MockYAMRPOffererServer
}

// NewMockYAMRPOffererServer creates a new mock instance.
func NewMockYAMRPOffererServer(ctrl *gomock.Controller) *MockYAMRPOffererServer {
	mock := &MockYAMRPOffererServer{ctrl: ctrl}
	mock.recorder = &MockYAMRPOffererServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPOffererServer) EXPECT() *MockYAMRPOffererServerMockRecorder {
	return m.recorder
}

// SendOffer mocks base method.
func (m *MockYAMRPOffererServer) SendOffer(arg0 context.Context, arg1 *proto.SendOfferRequest) (*proto.OfferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOffer", arg0, arg1)
	ret0, _ := ret[0].(*proto.OfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOffer indicates an expected call of SendOffer.
func (mr *MockYAMRPOffererServerMockRecorder) SendOffer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOffer", reflect.TypeOf((*MockYAMRPOffererServer)(nil).SendOffer), arg0, arg1)
}

// WaitForAnswer mocks base method.
func (m *MockYAMRPOffererServer) WaitForAnswer(arg0 context.Context, arg1 *proto.WaitForAnswerRequest) (*proto.AnswerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForAnswer", arg0, arg1)
	ret0, _ := ret[0].(*proto.AnswerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForAnswer indicates an expected call of WaitForAnswer.
func (mr *MockYAMRPOffererServerMockRecorder) WaitForAnswer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAnswer", reflect.TypeOf((*MockYAMRPOffererServer)(nil).WaitForAnswer), arg0, arg1)
}

// WaitForICECandidate mocks base method.
func (m *MockYAMRPOffererServer) WaitForICECandidate(arg0 *proto.WaitForICECandidateRequest, arg1 proto.YAMRPOfferer_WaitForICECandidateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForICECandidate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForICECandidate indicates an expected call of WaitForICECandidate.
func (mr *MockYAMRPOffererServerMockRecorder) WaitForICECandidate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForICECandidate", reflect.TypeOf((*MockYAMRPOffererServer)(nil).WaitForICECandidate), arg0, arg1)
}

// mustEmbedUnimplementedYAMRPOffererServer mocks base method.
func (m *MockYAMRPOffererServer) mustEmbedUnimplementedYAMRPOffererServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedYAMRPOffererServer")
}

// mustEmbedUnimplementedYAMRPOffererServer indicates an expected call of mustEmbedUnimplementedYAMRPOffererServer.
func (mr *MockYAMRPOffererServerMockRecorder) mustEmbedUnimplementedYAMRPOffererServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedYAMRPOffererServer", reflect.TypeOf((*MockYAMRPOffererServer)(nil).mustEmbedUnimplementedYAMRPOffererServer))
}

// MockUnsafeYAMRPOffererServer is a mock of UnsafeYAMRPOffererServer interface.
type MockUnsafeYAMRPOffererServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeYAMRPOffererServerMockRecorder
}

// MockUnsafeYAMRPOffererServerMockRecorder is the mock recorder for MockUnsafeYAMRPOffererServer.
type MockUnsafeYAMRPOffererServerMockRecorder struct {
	mock *MockUnsafeYAMRPOffererServer
}

// NewMockUnsafeYAMRPOffererServer creates a new mock instance.
func NewMockUnsafeYAMRPOffererServer(ctrl *gomock.Controller) *MockUnsafeYAMRPOffererServer {
	mock := &MockUnsafeYAMRPOffererServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeYAMRPOffererServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeYAMRPOffererServer) EXPECT() *MockUnsafeYAMRPOffererServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedYAMRPOffererServer mocks base method.
func (m *MockUnsafeYAMRPOffererServer) mustEmbedUnimplementedYAMRPOffererServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedYAMRPOffererServer")
}

// mustEmbedUnimplementedYAMRPOffererServer indicates an expected call of mustEmbedUnimplementedYAMRPOffererServer.
func (mr *MockUnsafeYAMRPOffererServerMockRecorder) mustEmbedUnimplementedYAMRPOffererServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedYAMRPOffererServer", reflect.TypeOf((*MockUnsafeYAMRPOffererServer)(nil).mustEmbedUnimplementedYAMRPOffererServer))
}

// MockYAMRPOfferer_WaitForICECandidateServer is a mock of YAMRPOfferer_WaitForICECandidateServer interface.
type MockYAMRPOfferer_WaitForICECandidateServer struct {
	ctrl     *gomock.Controller
	recorder *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder
}

// MockYAMRPOfferer_WaitForICECandidateServerMockRecorder is the mock recorder for MockYAMRPOfferer_WaitForICECandidateServer.
type MockYAMRPOfferer_WaitForICECandidateServerMockRecorder struct {
	mock *MockYAMRPOfferer_WaitForICECandidateServer
}

// NewMockYAMRPOfferer_WaitForICECandidateServer creates a new mock instance.
func NewMockYAMRPOfferer_WaitForICECandidateServer(ctrl *gomock.Controller) *MockYAMRPOfferer_WaitForICECandidateServer {
	mock := &MockYAMRPOfferer_WaitForICECandidateServer{ctrl: ctrl}
	mock.recorder = &MockYAMRPOfferer_WaitForICECandidateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAMRPOfferer_WaitForICECandidateServer) EXPECT() *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockYAMRPOfferer_WaitForICECandidateServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateServer) Send(arg0 *proto.IceCandidate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockYAMRPOfferer_WaitForICECandidateServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockYAMRPOfferer_WaitForICECandidateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockYAMRPOfferer_WaitForICECandidateServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockYAMRPOfferer_WaitForICECandidateServer)(nil).SetTrailer), arg0)
}

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// LoginClient mocks base method.
func (m *MockAuthClient) LoginClient(ctx context.Context, in *proto.UserLogin, opts ...grpc.CallOption) (*proto.AuthToken, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginClient", varargs...)
	ret0, _ := ret[0].(*proto.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockAuthClientMockRecorder) LoginClient(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockAuthClient)(nil).LoginClient), varargs...)
}

// LoginHost mocks base method.
func (m *MockAuthClient) LoginHost(ctx context.Context, in *proto.InitHostRequest, opts ...grpc.CallOption) (*proto.InitHostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginHost", varargs...)
	ret0, _ := ret[0].(*proto.InitHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHost indicates an expected call of LoginHost.
func (mr *MockAuthClientMockRecorder) LoginHost(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHost", reflect.TypeOf((*MockAuthClient)(nil).LoginHost), varargs...)
}

// MockAuthServer is a mock of AuthServer interface.
type MockAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServerMockRecorder
}

// MockAuthServerMockRecorder is the mock recorder for MockAuthServer.
type MockAuthServerMockRecorder struct {
	mock *MockAuthServer
}

// NewMockAuthServer creates a new mock instance.
func NewMockAuthServer(ctrl *gomock.Controller) *MockAuthServer {
	mock := &MockAuthServer{ctrl: ctrl}
	mock.recorder = &MockAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServer) EXPECT() *MockAuthServerMockRecorder {
	return m.recorder
}

// LoginClient mocks base method.
func (m *MockAuthServer) LoginClient(arg0 context.Context, arg1 *proto.UserLogin) (*proto.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClient", arg0, arg1)
	ret0, _ := ret[0].(*proto.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockAuthServerMockRecorder) LoginClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockAuthServer)(nil).LoginClient), arg0, arg1)
}

// LoginHost mocks base method.
func (m *MockAuthServer) LoginHost(arg0 context.Context, arg1 *proto.InitHostRequest) (*proto.InitHostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHost", arg0, arg1)
	ret0, _ := ret[0].(*proto.InitHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHost indicates an expected call of LoginHost.
func (mr *MockAuthServerMockRecorder) LoginHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHost", reflect.TypeOf((*MockAuthServer)(nil).LoginHost), arg0, arg1)
}

// mustEmbedUnimplementedAuthServer mocks base method.
func (m *MockAuthServer) mustEmbedUnimplementedAuthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServer")
}

// mustEmbedUnimplementedAuthServer indicates an expected call of mustEmbedUnimplementedAuthServer.
func (mr *MockAuthServerMockRecorder) mustEmbedUnimplementedAuthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServer", reflect.TypeOf((*MockAuthServer)(nil).mustEmbedUnimplementedAuthServer))
}

// MockUnsafeAuthServer is a mock of UnsafeAuthServer interface.
type MockUnsafeAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServerMockRecorder
}

// MockUnsafeAuthServerMockRecorder is the mock recorder for MockUnsafeAuthServer.
type MockUnsafeAuthServerMockRecorder struct {
	mock *MockUnsafeAuthServer
}

// NewMockUnsafeAuthServer creates a new mock instance.
func NewMockUnsafeAuthServer(ctrl *gomock.Controller) *MockUnsafeAuthServer {
	mock := &MockUnsafeAuthServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServer) EXPECT() *MockUnsafeAuthServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServer mocks base method.
func (m *MockUnsafeAuthServer) mustEmbedUnimplementedAuthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServer")
}

// mustEmbedUnimplementedAuthServer indicates an expected call of mustEmbedUnimplementedAuthServer.
func (mr *MockUnsafeAuthServerMockRecorder) mustEmbedUnimplementedAuthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServer", reflect.TypeOf((*MockUnsafeAuthServer)(nil).mustEmbedUnimplementedAuthServer))
}

// MockHostClient is a mock of HostClient interface.
type MockHostClient struct {
	ctrl     *gomock.Controller
	recorder *MockHostClientMockRecorder
}

// MockHostClientMockRecorder is the mock recorder for MockHostClient.
type MockHostClientMockRecorder struct {
	mock *MockHostClient
}

// NewMockHostClient creates a new mock instance.
func NewMockHostClient(ctrl *gomock.Controller) *MockHostClient {
	mock := &MockHostClient{ctrl: ctrl}
	mock.recorder = &MockHostClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostClient) EXPECT() *MockHostClientMockRecorder {
	return m.recorder
}

// ListenNewOffer mocks base method.
func (m *MockHostClient) ListenNewOffer(ctx context.Context, in *proto.WaitForOfferRequest, opts ...grpc.CallOption) (proto.Host_ListenNewOfferClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListenNewOffer", varargs...)
	ret0, _ := ret[0].(proto.Host_ListenNewOfferClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenNewOffer indicates an expected call of ListenNewOffer.
func (mr *MockHostClientMockRecorder) ListenNewOffer(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenNewOffer", reflect.TypeOf((*MockHostClient)(nil).ListenNewOffer), varargs...)
}

// MockHost_ListenNewOfferClient is a mock of Host_ListenNewOfferClient interface.
type MockHost_ListenNewOfferClient struct {
	ctrl     *gomock.Controller
	recorder *MockHost_ListenNewOfferClientMockRecorder
}

// MockHost_ListenNewOfferClientMockRecorder is the mock recorder for MockHost_ListenNewOfferClient.
type MockHost_ListenNewOfferClientMockRecorder struct {
	mock *MockHost_ListenNewOfferClient
}

// NewMockHost_ListenNewOfferClient creates a new mock instance.
func NewMockHost_ListenNewOfferClient(ctrl *gomock.Controller) *MockHost_ListenNewOfferClient {
	mock := &MockHost_ListenNewOfferClient{ctrl: ctrl}
	mock.recorder = &MockHost_ListenNewOfferClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost_ListenNewOfferClient) EXPECT() *MockHost_ListenNewOfferClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockHost_ListenNewOfferClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockHost_ListenNewOfferClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockHost_ListenNewOfferClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHost_ListenNewOfferClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).Context))
}

// Header mocks base method.
func (m *MockHost_ListenNewOfferClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockHost_ListenNewOfferClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockHost_ListenNewOfferClient) Recv() (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockHost_ListenNewOfferClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockHost_ListenNewOfferClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHost_ListenNewOfferClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockHost_ListenNewOfferClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHost_ListenNewOfferClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockHost_ListenNewOfferClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockHost_ListenNewOfferClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockHost_ListenNewOfferClient)(nil).Trailer))
}

// MockHostServer is a mock of HostServer interface.
type MockHostServer struct {
	ctrl     *gomock.Controller
	recorder *MockHostServerMockRecorder
}

// MockHostServerMockRecorder is the mock recorder for MockHostServer.
type MockHostServerMockRecorder struct {
	mock *MockHostServer
}

// NewMockHostServer creates a new mock instance.
func NewMockHostServer(ctrl *gomock.Controller) *MockHostServer {
	mock := &MockHostServer{ctrl: ctrl}
	mock.recorder = &MockHostServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostServer) EXPECT() *MockHostServerMockRecorder {
	return m.recorder
}

// ListenNewOffer mocks base method.
func (m *MockHostServer) ListenNewOffer(arg0 *proto.WaitForOfferRequest, arg1 proto.Host_ListenNewOfferServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenNewOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenNewOffer indicates an expected call of ListenNewOffer.
func (mr *MockHostServerMockRecorder) ListenNewOffer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenNewOffer", reflect.TypeOf((*MockHostServer)(nil).ListenNewOffer), arg0, arg1)
}

// mustEmbedUnimplementedHostServer mocks base method.
func (m *MockHostServer) mustEmbedUnimplementedHostServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHostServer")
}

// mustEmbedUnimplementedHostServer indicates an expected call of mustEmbedUnimplementedHostServer.
func (mr *MockHostServerMockRecorder) mustEmbedUnimplementedHostServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHostServer", reflect.TypeOf((*MockHostServer)(nil).mustEmbedUnimplementedHostServer))
}

// MockUnsafeHostServer is a mock of UnsafeHostServer interface.
type MockUnsafeHostServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHostServerMockRecorder
}

// MockUnsafeHostServerMockRecorder is the mock recorder for MockUnsafeHostServer.
type MockUnsafeHostServerMockRecorder struct {
	mock *MockUnsafeHostServer
}

// NewMockUnsafeHostServer creates a new mock instance.
func NewMockUnsafeHostServer(ctrl *gomock.Controller) *MockUnsafeHostServer {
	mock := &MockUnsafeHostServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHostServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHostServer) EXPECT() *MockUnsafeHostServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHostServer mocks base method.
func (m *MockUnsafeHostServer) mustEmbedUnimplementedHostServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHostServer")
}

// mustEmbedUnimplementedHostServer indicates an expected call of mustEmbedUnimplementedHostServer.
func (mr *MockUnsafeHostServerMockRecorder) mustEmbedUnimplementedHostServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHostServer", reflect.TypeOf((*MockUnsafeHostServer)(nil).mustEmbedUnimplementedHostServer))
}

// MockHost_ListenNewOfferServer is a mock of Host_ListenNewOfferServer interface.
type MockHost_ListenNewOfferServer struct {
	ctrl     *gomock.Controller
	recorder *MockHost_ListenNewOfferServerMockRecorder
}

// MockHost_ListenNewOfferServerMockRecorder is the mock recorder for MockHost_ListenNewOfferServer.
type MockHost_ListenNewOfferServerMockRecorder struct {
	mock *MockHost_ListenNewOfferServer
}

// NewMockHost_ListenNewOfferServer creates a new mock instance.
func NewMockHost_ListenNewOfferServer(ctrl *gomock.Controller) *MockHost_ListenNewOfferServer {
	mock := &MockHost_ListenNewOfferServer{ctrl: ctrl}
	mock.recorder = &MockHost_ListenNewOfferServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost_ListenNewOfferServer) EXPECT() *MockHost_ListenNewOfferServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockHost_ListenNewOfferServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHost_ListenNewOfferServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockHost_ListenNewOfferServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHost_ListenNewOfferServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockHost_ListenNewOfferServer) Send(arg0 *proto.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockHost_ListenNewOfferServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockHost_ListenNewOfferServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockHost_ListenNewOfferServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockHost_ListenNewOfferServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHost_ListenNewOfferServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockHost_ListenNewOfferServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockHost_ListenNewOfferServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockHost_ListenNewOfferServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockHost_ListenNewOfferServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockHost_ListenNewOfferServer)(nil).SetTrailer), arg0)
}
