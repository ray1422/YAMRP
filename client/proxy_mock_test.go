// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/proxy.go
//
// Generated by this command:
//
//	mockgen -source=./client/proxy.go -package=client
//
// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	webrtc "github.com/pion/webrtc/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockDataChannelAbstract is a mock of DataChannelAbstract interface.
type MockDataChannelAbstract struct {
	ctrl     *gomock.Controller
	recorder *MockDataChannelAbstractMockRecorder
}

// MockDataChannelAbstractMockRecorder is the mock recorder for MockDataChannelAbstract.
type MockDataChannelAbstractMockRecorder struct {
	mock *MockDataChannelAbstract
}

// NewMockDataChannelAbstract creates a new mock instance.
func NewMockDataChannelAbstract(ctrl *gomock.Controller) *MockDataChannelAbstract {
	mock := &MockDataChannelAbstract{ctrl: ctrl}
	mock.recorder = &MockDataChannelAbstractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataChannelAbstract) EXPECT() *MockDataChannelAbstractMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataChannelAbstract) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataChannelAbstractMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataChannelAbstract)(nil).Close))
}

// OnClose mocks base method.
func (m *MockDataChannelAbstract) OnClose(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose", arg0)
}

// OnClose indicates an expected call of OnClose.
func (mr *MockDataChannelAbstractMockRecorder) OnClose(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockDataChannelAbstract)(nil).OnClose), arg0)
}

// OnMessage mocks base method.
func (m *MockDataChannelAbstract) OnMessage(arg0 func(webrtc.DataChannelMessage)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnMessage", arg0)
}

// OnMessage indicates an expected call of OnMessage.
func (mr *MockDataChannelAbstractMockRecorder) OnMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessage", reflect.TypeOf((*MockDataChannelAbstract)(nil).OnMessage), arg0)
}

// OnOpen mocks base method.
func (m *MockDataChannelAbstract) OnOpen(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnOpen", arg0)
}

// OnOpen indicates an expected call of OnOpen.
func (mr *MockDataChannelAbstractMockRecorder) OnOpen(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOpen", reflect.TypeOf((*MockDataChannelAbstract)(nil).OnOpen), arg0)
}

// Send mocks base method.
func (m *MockDataChannelAbstract) Send(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDataChannelAbstractMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDataChannelAbstract)(nil).Send), arg0)
}
